instance List of Traversable:
  def traverse(l, f):
    def consF(x, ys):
      return liftA2(Cons, f(x), ys)
    return l.foldr(wrap([]), consF)

def filter(Nil, _):
  return Nil

def filter(head|tail, f):
  return if f(head):
    head|filter(tail, f)
  else:
    filter(tail, f)

def head(Nil):
  return None

def head(head|tail):
  return Just(head)

def tail(Nil):
  return None

def tail(head|tail):
  return Just(tail)

def at(Nil, _):
  return None

def at(head|tail, n):
  if n < 0:
    return None

  if n == 0:
    return Just(head)

  return at(tail, n - 1)

def reverse(l):
  return l.foldl([], (acc, it): [it] <> acc)

def join(Nil, _):
  return []

def join(x|xs, delim):
  return xs.foldl(x, (acc, it): acc <> delim <> it)

def split(xs, delim):
  def splitPrime(Nil, _, Nil):
    return []

  def splitPrime(Nil, _, acc):
    return [acc]

  def splitPrime(x|xs, delim, acc):
    return if x == delim:
      [acc] <> splitPrime(xs, delim, [])
    else:
      splitPrime(xs, delim, acc <> [x])

  return splitPrime(xs, delim, [])

def span([], pred):
  return ([], [])

def span(x|xs, pred):
  return if pred(x):
    (satisfied, rest) = span(xs, pred)
    ((x|satisfied), rest)
  else:
    ([], x|xs)