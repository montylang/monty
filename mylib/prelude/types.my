type Functor:
  def map(self, function)

type Foldable:
  def foldl(self, initial, folder)

type Applicative:
  # Second parameter: Expects a function inside
  def apply(self, self) -> self
  def wrap(value) -> self

type Monad:
  def bind(self, function) -> self

type MonadPlus:
  def mzero() -> self
  def mplus(self, self) -> self

type Equal:
  def equals(self, self)

type Ordered:
  def compare(self, self)

class Ordering:
  LT
  GT
  EQ

type Show:
  def str(self)

type IntCastable:
  def int(self)

type Semigroup:
  def append(self, self) -> self

type Monoid:
  def mempty() -> self

type Alternative:
  def alt(self, self) -> self
  # TODO:
  #def empty() -> self

type Traversable:
  def traverse(self, function)

type MonadTransformer:
  def lift(toLift)
